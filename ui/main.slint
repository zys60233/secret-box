import { Button } from "std-widgets.slint";
import { MainWindowContent } from "content.slint";
import { LoginWindowContent } from "login.slint";
import { CreateWindowContent } from "create.slint";
import { EditWindowContent } from "edit.slint";
import { WindowCover } from "cover.slint";
import { PasswordWindowContent } from "password.slint";
import { DeleteWindowContent } from "delete.slint";
import { BottomBar } from "bottom.slint";

//列表行结构
struct ListItem {
    id: int,
    website: string,
    account: string,
    email: string,
    phone: string,
    password: string,
}

export component MainWindow inherits Window {
    width: 300px;
    height: 400px;
    title: "密码箱";
    icon: @image-url("icons/at.png");
    background: white;

    //菜单
    /*MenuBar {
        Menu {
            title: @tr("新建");
            MenuItem {
                title: "新建";
                activated => {
                    showCreateWindow()
                } 
            }
        }

        Menu {
            title: @tr("修改密码");
            MenuItem {
                title: @tr("修改密码");
                activated => {
                    showPasswordWindow() 
                }
            }
        }
    }*/

    //底部功能区
    BottomBarHandler := BottomBar {
        showCreate() => {
            showCreateWindow();
        }

        showEdit => {
            showPasswordWindow();
        }
    }

    //窗口初始化
    init => {
        showLoginWindow();
    }

    //主窗口
    mainWindowHander := MainWindowContent {
        edit(id, website, account, email, phone, password) => {
            parent.showEditWindow(id, website, account, email, phone, password);
        }

        delete(id) => {
            parent.showDeleteWindow(id);
        }
    }

    //遮罩
    windowCoverHandler := WindowCover {}

    //登录窗口
    loginWindowHandler := LoginWindowContent {
        in-out property <bool> login_result;

        close => {
            login_result = login(self.pwd);

            if login_result {
                parent.closeAllWindow();
                parent.hideLoginWindow();

                parent.width = 1400px;
                parent.height = 800px;
            } else {
                self.alert_text = "* 密码错误!";
                debug("密码错误");
            }
        }
    }

    //显示登录窗口
    callback showLoginWindow();
    showLoginWindow => {
        closeAllWindow();
        loginWindowHandler.visible = true;
    }

    //隐藏登录窗口
    callback hideLoginWindow();    
    hideLoginWindow => {
        loginWindowHandler.visible = false;
        BottomBarHandler.visible = true;
    }
    
    //创建窗口
    createWindowHandler := CreateWindowContent {
        in-out property <bool> create_result: false;

        //关闭窗口
        close => { 
            parent.hideCreateWindow();
        }

        //生成随机密码
        generate => {
            self.password = generate();
        }

        //创建账户
        create => {
            create_result = create(self.website, self.account, self.email, self.phone, self.password);
            if create_result {
                parent.hideCreateWindow();
            }
        }
    } 

    //显示创建窗口
    callback showCreateWindow();
    showCreateWindow => { 
        closeAllWindow();
        windowCoverHandler.visible = true;
        createWindowHandler.visible = true;
    }

    //隐藏创建窗口
    callback hideCreateWindow();
    hideCreateWindow => {
        windowCoverHandler.visible = false;
        createWindowHandler.website = "";
        createWindowHandler.account = "";
        createWindowHandler.email = "";
        createWindowHandler.phone = "";
        createWindowHandler.password = "";
        createWindowHandler.visible = false;
    }

    //编辑窗口
    editWindowHandler := EditWindowContent {
        in-out property <string> id;
        in-out property <string> website;
        in-out property <string> account;
        in-out property <string> email;
        in-out property <string> phone;
        in-out property <string> password;

        close => {
            parent.hideEditWindow();
        }
    }

    //显示编辑窗口
    callback showEditWindow(id: string, website: string, account: string, email: string, phone: string, password: string);
    showEditWindow(id, website, account, email, phone, password) => {
        closeAllWindow();
        windowCoverHandler.visible = true;
        editWindowHandler.visible = true;
        editWindowHandler.id = id;
        editWindowHandler.website = website;
        editWindowHandler.account = account;
        editWindowHandler.email = email;
        editWindowHandler.phone = phone;
        editWindowHandler.password = password;
    }

    //隐藏编辑窗口
    callback hideEditWindow();
    hideEditWindow => {
        editWindowHandler.visible = false;
        windowCoverHandler.visible = false;
    }

    //删除确认窗口
    deleteWindowHandler := DeleteWindowContent {
        in-out property <int> id;
        close => {
            parent.hideDeleteWindow();
        }

        delete => {
            if root.delete(self.id) {
                parent.hideDeleteWindow();
            }
        }
    }

    //显示删除确认窗口
    callback showDeleteWindow(id: int);
    showDeleteWindow(id) => {
        closeAllWindow();
        windowCoverHandler.visible = true;
        deleteWindowHandler.visible = true;
        deleteWindowHandler.id = id;
    }

    //隐藏删除确认窗口
    callback hideDeleteWindow();
    hideDeleteWindow => {
        windowCoverHandler.visible = false;
        deleteWindowHandler.visible = false;
        deleteWindowHandler.id = 0;
    }

    //修改密码窗口
    passwordWindowHandler := PasswordWindowContent {
        in-out property <bool> save_result;

        close => {
            parent.hidePasswordWindow();
        }

        save => {
            save_result = save(self.newPassword);
            if save_result {
                parent.hidePasswordWindow();
            }
        }
    }

    //显示修改密码窗口
    callback showPasswordWindow();
    showPasswordWindow => {
        closeAllWindow();
        passwordWindowHandler.visible = true;
        windowCoverHandler.visible = true;
    }

    //隐藏修改密码窗口
    callback hidePasswordWindow();
    hidePasswordWindow => {
        passwordWindowHandler.visible = false;
        windowCoverHandler.visible = false;
    }

    //关闭所有窗口
    callback closeAllWindow();
    closeAllWindow => {
        loginWindowHandler.visible = false;
        createWindowHandler.visible = false;
        editWindowHandler.visible = false;
        deleteWindowHandler.visible = false;
        passwordWindowHandler.visible = false;
        windowCoverHandler.visible = false;
    }

    //登录
    callback login(password: string) -> bool;

    //设置列表数据
    callback set_list(id: string, website: string, account: string, email: string, phone: string, password: string);
    set_list(id, website, account, email, phone, password) => {
        mainWindowHander.ListData.
    }

    //新增
    callback create(website: string, account: string, email: string, phone: string, password: string) -> bool;

    //生成随机密码
    callback generate() -> string;

    //修改密码
    callback save(password: string) -> bool;
    
    //删除记录
    callback delete(id: int) -> bool;
}
