import { Button } from "std-widgets.slint";
import { MainWindowContent } from "content.slint";
import { LoginWindowContent } from "login.slint";
import { CreateWindowContent } from "create.slint";
import { EditWindowContent } from "edit.slint";
import { WindowCover } from "cover.slint";
import { PasswordWindowContent } from "password.slint";
import { DeleteWindowContent } from "delete.slint";

export component MainWindow inherits Window {
    width: 1400px;
    height: 800px;
    title: "密码箱";
    icon: @image-url("icons/at.png");
    background: white;

    //菜单
    MenuBar {
        Menu {
            title: @tr("新建");
            MenuItem { title: "新建"; activated => { showCreateWindow() } }
        }

        Menu {
            title: @tr("修改密码");
            MenuItem { title: @tr("修改密码"); activated => { showPasswordWindow() } }
        }
    }

    //窗口初始化
    init => {
        showLoginWindow();
    }

    //主窗口
    MainWindowContent {
        edit => {
            parent.showEditWindow();
        }

        delete => {
            parent.showDeleteWindow();
        }
    }

    //遮罩
    windowCoverHandler := WindowCover {}

    //登录窗口
    loginWindowHandler := LoginWindowContent {
        close => {
            parent.closeAllWindow();
            parent.hideLoginWindow();
            login();
        }
    }

    //显示登录窗口
    callback showLoginWindow();
    showLoginWindow => {
        closeAllWindow();
        windowCoverHandler.visible = true;
        loginWindowHandler.visible = true;
    }

    //隐藏登录窗口
    callback hideLoginWindow();    
    hideLoginWindow => {
        loginWindowHandler.visible = false;
        windowCoverHandler.visible = false;
    }
    
    //创建窗口
    createWindowHandler := CreateWindowContent {
        close => {
            parent.hideCreateWindow();
        }
    } 

    //显示创建窗口
    callback showCreateWindow();
    showCreateWindow => { 
        closeAllWindow();
        windowCoverHandler.visible = true;
        createWindowHandler.visible = true;
    }

    //隐藏创建窗口
    callback hideCreateWindow();
    hideCreateWindow => {
        windowCoverHandler.visible = false;
        createWindowHandler.visible = false;
    }

    //编辑窗口
    editWindowHandler := EditWindowContent {
        close => {
            parent.hideEditWindow();
        }
    }

    //显示编辑窗口
    callback showEditWindow();
    showEditWindow => {
        closeAllWindow();
        windowCoverHandler.visible = true;
        editWindowHandler.visible = true;
    }

    //隐藏编辑窗口
    callback hideEditWindow();
    hideEditWindow => {
        editWindowHandler.visible = false;
        windowCoverHandler.visible = false;
    }

    //删除确认窗口
    deleteWindowHandler := DeleteWindowContent {
        close => {
            parent.hideDeleteWindow();
        }
    }

    //显示删除确认窗口
    callback showDeleteWindow();
    showDeleteWindow => {
        closeAllWindow();
        windowCoverHandler.visible = true;
        deleteWindowHandler.visible = true;
    }

    //隐藏删除确认窗口
    callback hideDeleteWindow();
    hideDeleteWindow => {
        windowCoverHandler.visible = false;
        deleteWindowHandler.visible = false;
    }

    //修改密码窗口
    passwordWindowHandler := PasswordWindowContent {
        close => {
            parent.hidePasswordWindow();
        }
    }

    //显示修改密码窗口
    callback showPasswordWindow();
    showPasswordWindow => {
        closeAllWindow();
        passwordWindowHandler.visible = true;
        windowCoverHandler.visible = true;
    }

    //隐藏修改密码窗口
    callback hidePasswordWindow();
    hidePasswordWindow => {
        passwordWindowHandler.visible = false;
        windowCoverHandler.visible = false;
    }

    //关闭所有窗口
    callback closeAllWindow();
    closeAllWindow => {
        loginWindowHandler.visible = false;
        createWindowHandler.visible = false;
        editWindowHandler.visible = false;
        deleteWindowHandler.visible = false;
        passwordWindowHandler.visible = false;
        windowCoverHandler.visible = false;
    }

    //callback
    callback login();
}
